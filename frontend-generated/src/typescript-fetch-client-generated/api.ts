/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * DBMS by Stanislav Bezkorovainyi
 * Опис DBMS до лабораторної роботи з інформаційних технологій
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

// @ts-nocheck

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AddColumnQuery
 */
export interface AddColumnQuery {
    /**
     * 
     * @type {string}
     * @memberof AddColumnQuery
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AddColumnQuery
     */
    type?: AddColumnQuery.TypeEnum;
}

/**
 * @export
 * @namespace AddColumnQuery
 */
export namespace AddColumnQuery {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Integer = 'Integer',
        Real = 'Real',
        Char = 'Char',
        String = 'String',
        HtmlFile = 'HtmlFile',
        StringInvl = 'StringInvl'
    }
}
/**
 * 
 * @export
 * @interface ColumnMetadata
 */
export interface ColumnMetadata {
    /**
     * 
     * @type {string}
     * @memberof ColumnMetadata
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ColumnMetadata
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof ColumnMetadata
     */
    type: ColumnMetadata.TypeEnum;
}

/**
 * @export
 * @namespace ColumnMetadata
 */
export namespace ColumnMetadata {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Integer = <any> 'Integer',
        Real = <any> 'Real',
        Char = <any> 'Char',
        String = <any> 'String',
        HtmlFile = <any> 'HtmlFile',
        StringInvl = <any> 'StringInvl'
    }
}
/**
 * 
 * @export
 * @interface DatabaseMeta
 */
export interface DatabaseMeta {
    /**
     * 
     * @type {string}
     * @memberof DatabaseMeta
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseMeta
     */
    name: string;
    /**
     * 
     * @type {Array<TableMetadata>}
     * @memberof DatabaseMeta
     */
    tables: Array<TableMetadata>;
}
/**
 * 
 * @export
 * @interface DbsBody
 */
export interface DbsBody {
    /**
     * 
     * @type {string}
     * @memberof DbsBody
     */
    name: string;
}
/**
 * 
 * @export
 * @interface DbsDbIdBody
 */
export interface DbsDbIdBody {
    /**
     * 
     * @type {string}
     * @memberof DbsDbIdBody
     */
    name: string;
}
/**
 * 
 * @export
 * @interface EditCellRequest
 */
export interface EditCellRequest {
    /**
     * 
     * @type {string}
     * @memberof EditCellRequest
     */
    colId: string;
    /**
     * 
     * @type {string}
     * @memberof EditCellRequest
     */
    newValue: string;
}
/**
 * 
 * @export
 * @interface IdResponse
 */
export interface IdResponse {
    /**
     * 
     * @type {string}
     * @memberof IdResponse
     */
    id: string;
}
/**
 * 
 * @export
 * @interface NameRequest
 */
export interface NameRequest {
    /**
     * 
     * @type {string}
     * @memberof NameRequest
     */
    name: string;
}
/**
 * 
 * @export
 * @interface RowData
 */
export interface RowData {
    /**
     * 
     * @type {Array<string>}
     * @memberof RowData
     */
    data: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RowData
     */
    rowId: string;
}
/**
 * 
 * @export
 * @interface TableData
 */
export interface TableData {
    /**
     * 
     * @type {Array<RowData>}
     * @memberof TableData
     */
    data: Array<RowData>;
}
/**
 * 
 * @export
 * @interface TableMetadata
 */
export interface TableMetadata {
    /**
     * 
     * @type {string}
     * @memberof TableMetadata
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TableMetadata
     */
    name: string;
    /**
     * 
     * @type {Array<ColumnMetadata>}
     * @memberof TableMetadata
     */
    columns: Array<ColumnMetadata>;
}
/**
 * BlobsApi - fetch parameter creator
 * @export
 */
export const BlobsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve an HTML blob
         * @param {string} blobId The ID of the blob to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlob(blobId: string, options: any = {}): FetchArgs {
            // verify required parameter 'blobId' is not null or undefined
            if (blobId === null || blobId === undefined) {
                throw new RequiredError('blobId','Required parameter blobId was null or undefined when calling getBlob.');
            }
            const localVarPath = `/blobs/{blobId}`
                .replace(`{${"blobId"}}`, encodeURIComponent(String(blobId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlobsApi - functional programming interface
 * @export
 */
export const BlobsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve an HTML blob
         * @param {string} blobId The ID of the blob to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlob(blobId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = BlobsApiFetchParamCreator(configuration).getBlob(blobId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BlobsApi - factory interface
 * @export
 */
export const BlobsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieve an HTML blob
         * @param {string} blobId The ID of the blob to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlob(blobId: string, options?: any) {
            return BlobsApiFp(configuration).getBlob(blobId, options)(fetch, basePath);
        },
    };
};

/**
 * BlobsApi - object-oriented interface
 * @export
 * @class BlobsApi
 * @extends {BaseAPI}
 */
export class BlobsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve an HTML blob
     * @param {string} blobId The ID of the blob to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobsApi
     */
    public getBlob(blobId: string, options?: any) {
        return BlobsApiFp(this.configuration).getBlob(blobId, options)(this.fetch, this.basePath);
    }

}
/**
 * ColumnsApi - fetch parameter creator
 * @export
 */
export const ColumnsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a column to a table.
         * @param {AddColumnQuery} body The payload with the name and type of the new column
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createColumn(body: AddColumnQuery, dbId: string, tableId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createColumn.');
            }
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling createColumn.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling createColumn.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}/columns`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a column from a table
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} columnId The ID of the column
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteColumn(dbId: string, tableId: string, columnId: string, options: any = {}): FetchArgs {
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling deleteColumn.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling deleteColumn.');
            }
            // verify required parameter 'columnId' is not null or undefined
            if (columnId === null || columnId === undefined) {
                throw new RequiredError('columnId','Required parameter columnId was null or undefined when calling deleteColumn.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}/columns/{columnId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)))
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change name of a column in a table
         * @param {NameRequest} body The payload with the new name of the column
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} columnId The ID of the column
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateColumnName(body: NameRequest, dbId: string, tableId: string, columnId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateColumnName.');
            }
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling updateColumnName.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling updateColumnName.');
            }
            // verify required parameter 'columnId' is not null or undefined
            if (columnId === null || columnId === undefined) {
                throw new RequiredError('columnId','Required parameter columnId was null or undefined when calling updateColumnName.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}/columns/{columnId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)))
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ColumnsApi - functional programming interface
 * @export
 */
export const ColumnsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a column to a table.
         * @param {AddColumnQuery} body The payload with the name and type of the new column
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createColumn(body: AddColumnQuery, dbId: string, tableId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = ColumnsApiFetchParamCreator(configuration).createColumn(body, dbId, tableId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a column from a table
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} columnId The ID of the column
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteColumn(dbId: string, tableId: string, columnId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ColumnsApiFetchParamCreator(configuration).deleteColumn(dbId, tableId, columnId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Change name of a column in a table
         * @param {NameRequest} body The payload with the new name of the column
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} columnId The ID of the column
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateColumnName(body: NameRequest, dbId: string, tableId: string, columnId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ColumnsApiFetchParamCreator(configuration).updateColumnName(body, dbId, tableId, columnId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ColumnsApi - factory interface
 * @export
 */
export const ColumnsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a column to a table.
         * @param {AddColumnQuery} body The payload with the name and type of the new column
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createColumn(body: AddColumnQuery, dbId: string, tableId: string, options?: any) {
            return ColumnsApiFp(configuration).createColumn(body, dbId, tableId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a column from a table
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} columnId The ID of the column
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteColumn(dbId: string, tableId: string, columnId: string, options?: any) {
            return ColumnsApiFp(configuration).deleteColumn(dbId, tableId, columnId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Change name of a column in a table
         * @param {NameRequest} body The payload with the new name of the column
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} columnId The ID of the column
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateColumnName(body: NameRequest, dbId: string, tableId: string, columnId: string, options?: any) {
            return ColumnsApiFp(configuration).updateColumnName(body, dbId, tableId, columnId, options)(fetch, basePath);
        },
    };
};

/**
 * ColumnsApi - object-oriented interface
 * @export
 * @class ColumnsApi
 * @extends {BaseAPI}
 */
export class ColumnsApi extends BaseAPI {
    /**
     * 
     * @summary Add a column to a table.
     * @param {AddColumnQuery} body The payload with the name and type of the new column
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColumnsApi
     */
    public createColumn(body: AddColumnQuery, dbId: string, tableId: string, options?: any) {
        return ColumnsApiFp(this.configuration).createColumn(body, dbId, tableId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a column from a table
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {string} columnId The ID of the column
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColumnsApi
     */
    public deleteColumn(dbId: string, tableId: string, columnId: string, options?: any) {
        return ColumnsApiFp(this.configuration).deleteColumn(dbId, tableId, columnId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Change name of a column in a table
     * @param {NameRequest} body The payload with the new name of the column
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {string} columnId The ID of the column
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColumnsApi
     */
    public updateColumnName(body: NameRequest, dbId: string, tableId: string, columnId: string, options?: any) {
        return ColumnsApiFp(this.configuration).updateColumnName(body, dbId, tableId, columnId, options)(this.fetch, this.basePath);
    }

}
/**
 * DbsApi - fetch parameter creator
 * @export
 */
export const DbsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DbsBody} body The payload with the name of the database to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDB(body: DbsBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDB.');
            }
            const localVarPath = `/dbs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the database.
         * @param {string} dbId The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbsDbIdDELETE(dbId: string, options: any = {}): FetchArgs {
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling dbsDbIdDELETE.');
            }
            const localVarPath = `/dbs/{dbId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit name of the database.
         * @param {DbsDbIdBody} body The payload with the name of the database to change to
         * @param {string} dbId The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbsDbIdPOST(body: DbsDbIdBody, dbId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dbsDbIdPOST.');
            }
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling dbsDbIdPOST.');
            }
            const localVarPath = `/dbs/{dbId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrievies the list of all database or a particular one.
         * @summary Retrive information about a database/databases.
         * @param {string} [name] The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDB(name?: string, options: any = {}): FetchArgs {
            const localVarPath = `/dbs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a particular DB.
         * @summary Retrive information about a database.
         * @param {string} dbId The ID of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDBById(dbId: string, options: any = {}): FetchArgs {
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling getDBById.');
            }
            const localVarPath = `/dbs/{dbId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DbsApi - functional programming interface
 * @export
 */
export const DbsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DbsBody} body The payload with the name of the database to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDB(body: DbsBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = DbsApiFetchParamCreator(configuration).createDB(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete the database.
         * @param {string} dbId The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbsDbIdDELETE(dbId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DbsApiFetchParamCreator(configuration).dbsDbIdDELETE(dbId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit name of the database.
         * @param {DbsDbIdBody} body The payload with the name of the database to change to
         * @param {string} dbId The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbsDbIdPOST(body: DbsDbIdBody, dbId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DbsApiFetchParamCreator(configuration).dbsDbIdPOST(body, dbId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrievies the list of all database or a particular one.
         * @summary Retrive information about a database/databases.
         * @param {string} [name] The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDB(name?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DatabaseMeta>> {
            const localVarFetchArgs = DbsApiFetchParamCreator(configuration).getDB(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve information about a particular DB.
         * @summary Retrive information about a database.
         * @param {string} dbId The ID of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDBById(dbId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DatabaseMeta> {
            const localVarFetchArgs = DbsApiFetchParamCreator(configuration).getDBById(dbId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DbsApi - factory interface
 * @export
 */
export const DbsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {DbsBody} body The payload with the name of the database to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDB(body: DbsBody, options?: any) {
            return DbsApiFp(configuration).createDB(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete the database.
         * @param {string} dbId The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbsDbIdDELETE(dbId: string, options?: any) {
            return DbsApiFp(configuration).dbsDbIdDELETE(dbId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit name of the database.
         * @param {DbsDbIdBody} body The payload with the name of the database to change to
         * @param {string} dbId The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbsDbIdPOST(body: DbsDbIdBody, dbId: string, options?: any) {
            return DbsApiFp(configuration).dbsDbIdPOST(body, dbId, options)(fetch, basePath);
        },
        /**
         * Retrievies the list of all database or a particular one.
         * @summary Retrive information about a database/databases.
         * @param {string} [name] The name of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDB(name?: string, options?: any) {
            return DbsApiFp(configuration).getDB(name, options)(fetch, basePath);
        },
        /**
         * Retrieve information about a particular DB.
         * @summary Retrive information about a database.
         * @param {string} dbId The ID of the database to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDBById(dbId: string, options?: any) {
            return DbsApiFp(configuration).getDBById(dbId, options)(fetch, basePath);
        },
    };
};

/**
 * DbsApi - object-oriented interface
 * @export
 * @class DbsApi
 * @extends {BaseAPI}
 */
export class DbsApi extends BaseAPI {
    /**
     * 
     * @param {DbsBody} body The payload with the name of the database to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DbsApi
     */
    public createDB(body: DbsBody, options?: any) {
        return DbsApiFp(this.configuration).createDB(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete the database.
     * @param {string} dbId The name of the database to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DbsApi
     */
    public dbsDbIdDELETE(dbId: string, options?: any) {
        return DbsApiFp(this.configuration).dbsDbIdDELETE(dbId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit name of the database.
     * @param {DbsDbIdBody} body The payload with the name of the database to change to
     * @param {string} dbId The name of the database to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DbsApi
     */
    public dbsDbIdPOST(body: DbsDbIdBody, dbId: string, options?: any) {
        return DbsApiFp(this.configuration).dbsDbIdPOST(body, dbId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrievies the list of all database or a particular one.
     * @summary Retrive information about a database/databases.
     * @param {string} [name] The name of the database to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DbsApi
     */
    public getDB(name?: string, options?: any) {
        return DbsApiFp(this.configuration).getDB(name, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve information about a particular DB.
     * @summary Retrive information about a database.
     * @param {string} dbId The ID of the database to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DbsApi
     */
    public getDBById(dbId: string, options?: any) {
        return DbsApiFp(this.configuration).getDBById(dbId, options)(this.fetch, this.basePath);
    }

}
/**
 * RowsApi - fetch parameter creator
 * @export
 */
export const RowsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add table's row.
         * @param {Array<string>} body The payload with the new row&#x27;s content
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRow(body: Array<string>, dbId: string, tableId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addRow.');
            }
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling addRow.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling addRow.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}/rows`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a row from a table
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} rowId The ID of the row
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRow(dbId: string, tableId: string, rowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling deleteRow.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling deleteRow.');
            }
            // verify required parameter 'rowId' is not null or undefined
            if (rowId === null || rowId === undefined) {
                throw new RequiredError('rowId','Required parameter rowId was null or undefined when calling deleteRow.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}/rows/{rowId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a value in a cell in a particular row.
         * @param {EditCellRequest} body The payload with the information on which cell to update
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} rowId The ID of the row
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCellValue(body: EditCellRequest, dbId: string, tableId: string, rowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCellValue.');
            }
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling updateCellValue.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling updateCellValue.');
            }
            // verify required parameter 'rowId' is not null or undefined
            if (rowId === null || rowId === undefined) {
                throw new RequiredError('rowId','Required parameter rowId was null or undefined when calling updateCellValue.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}/rows/{rowId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RowsApi - functional programming interface
 * @export
 */
export const RowsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add table's row.
         * @param {Array<string>} body The payload with the new row&#x27;s content
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRow(body: Array<string>, dbId: string, tableId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = RowsApiFetchParamCreator(configuration).addRow(body, dbId, tableId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a row from a table
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} rowId The ID of the row
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRow(dbId: string, tableId: string, rowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RowsApiFetchParamCreator(configuration).deleteRow(dbId, tableId, rowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a value in a cell in a particular row.
         * @param {EditCellRequest} body The payload with the information on which cell to update
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} rowId The ID of the row
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCellValue(body: EditCellRequest, dbId: string, tableId: string, rowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RowsApiFetchParamCreator(configuration).updateCellValue(body, dbId, tableId, rowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RowsApi - factory interface
 * @export
 */
export const RowsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add table's row.
         * @param {Array<string>} body The payload with the new row&#x27;s content
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRow(body: Array<string>, dbId: string, tableId: string, options?: any) {
            return RowsApiFp(configuration).addRow(body, dbId, tableId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a row from a table
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} rowId The ID of the row
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRow(dbId: string, tableId: string, rowId: string, options?: any) {
            return RowsApiFp(configuration).deleteRow(dbId, tableId, rowId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a value in a cell in a particular row.
         * @param {EditCellRequest} body The payload with the information on which cell to update
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} rowId The ID of the row
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCellValue(body: EditCellRequest, dbId: string, tableId: string, rowId: string, options?: any) {
            return RowsApiFp(configuration).updateCellValue(body, dbId, tableId, rowId, options)(fetch, basePath);
        },
    };
};

/**
 * RowsApi - object-oriented interface
 * @export
 * @class RowsApi
 * @extends {BaseAPI}
 */
export class RowsApi extends BaseAPI {
    /**
     * 
     * @summary Add table's row.
     * @param {Array<string>} body The payload with the new row&#x27;s content
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowsApi
     */
    public addRow(body: Array<string>, dbId: string, tableId: string, options?: any) {
        return RowsApiFp(this.configuration).addRow(body, dbId, tableId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a row from a table
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {string} rowId The ID of the row
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowsApi
     */
    public deleteRow(dbId: string, tableId: string, rowId: string, options?: any) {
        return RowsApiFp(this.configuration).deleteRow(dbId, tableId, rowId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a value in a cell in a particular row.
     * @param {EditCellRequest} body The payload with the information on which cell to update
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {string} rowId The ID of the row
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowsApi
     */
    public updateCellValue(body: EditCellRequest, dbId: string, tableId: string, rowId: string, options?: any) {
        return RowsApiFp(this.configuration).updateCellValue(body, dbId, tableId, rowId, options)(this.fetch, this.basePath);
    }

}
/**
 * TableApi - fetch parameter creator
 * @export
 */
export const TableApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create table for a database.
         * @param {NameRequest} body The payload with the name of the table to create
         * @param {string} dbId The ID of the database to add the table to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTable(body: NameRequest, dbId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTable.');
            }
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling createTable.');
            }
            const localVarPath = `/dbs/{dbId}/tables`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a table from a database.
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable(dbId: string, tableId: string, options: any = {}): FetchArgs {
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling deleteTable.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling deleteTable.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit table's name.
         * @param {NameRequest} body The payload with the name of the new table name
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTableName(body: NameRequest, dbId: string, tableId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling editTableName.');
            }
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling editTableName.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling editTableName.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the data from the table.
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} [intersection] The ID of the table to find intersection with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableInfo(dbId: string, tableId: string, intersection?: string, options: any = {}): FetchArgs {
            // verify required parameter 'dbId' is not null or undefined
            if (dbId === null || dbId === undefined) {
                throw new RequiredError('dbId','Required parameter dbId was null or undefined when calling getTableInfo.');
            }
            // verify required parameter 'tableId' is not null or undefined
            if (tableId === null || tableId === undefined) {
                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling getTableInfo.');
            }
            const localVarPath = `/dbs/{dbId}/tables/{tableId}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (intersection !== undefined) {
                localVarQueryParameter['intersection'] = intersection;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TableApi - functional programming interface
 * @export
 */
export const TableApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create table for a database.
         * @param {NameRequest} body The payload with the name of the table to create
         * @param {string} dbId The ID of the database to add the table to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTable(body: NameRequest, dbId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = TableApiFetchParamCreator(configuration).createTable(body, dbId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a table from a database.
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable(dbId: string, tableId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TableApiFetchParamCreator(configuration).deleteTable(dbId, tableId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit table's name.
         * @param {NameRequest} body The payload with the name of the new table name
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTableName(body: NameRequest, dbId: string, tableId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = TableApiFetchParamCreator(configuration).editTableName(body, dbId, tableId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all the data from the table.
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} [intersection] The ID of the table to find intersection with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableInfo(dbId: string, tableId: string, intersection?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableData> {
            const localVarFetchArgs = TableApiFetchParamCreator(configuration).getTableInfo(dbId, tableId, intersection, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TableApi - factory interface
 * @export
 */
export const TableApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create table for a database.
         * @param {NameRequest} body The payload with the name of the table to create
         * @param {string} dbId The ID of the database to add the table to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTable(body: NameRequest, dbId: string, options?: any) {
            return TableApiFp(configuration).createTable(body, dbId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a table from a database.
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable(dbId: string, tableId: string, options?: any) {
            return TableApiFp(configuration).deleteTable(dbId, tableId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit table's name.
         * @param {NameRequest} body The payload with the name of the new table name
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTableName(body: NameRequest, dbId: string, tableId: string, options?: any) {
            return TableApiFp(configuration).editTableName(body, dbId, tableId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all the data from the table.
         * @param {string} dbId The ID of the database
         * @param {string} tableId The ID of the table
         * @param {string} [intersection] The ID of the table to find intersection with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableInfo(dbId: string, tableId: string, intersection?: string, options?: any) {
            return TableApiFp(configuration).getTableInfo(dbId, tableId, intersection, options)(fetch, basePath);
        },
    };
};

/**
 * TableApi - object-oriented interface
 * @export
 * @class TableApi
 * @extends {BaseAPI}
 */
export class TableApi extends BaseAPI {
    /**
     * 
     * @summary Create table for a database.
     * @param {NameRequest} body The payload with the name of the table to create
     * @param {string} dbId The ID of the database to add the table to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public createTable(body: NameRequest, dbId: string, options?: any) {
        return TableApiFp(this.configuration).createTable(body, dbId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a table from a database.
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public deleteTable(dbId: string, tableId: string, options?: any) {
        return TableApiFp(this.configuration).deleteTable(dbId, tableId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit table's name.
     * @param {NameRequest} body The payload with the name of the new table name
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public editTableName(body: NameRequest, dbId: string, tableId: string, options?: any) {
        return TableApiFp(this.configuration).editTableName(body, dbId, tableId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all the data from the table.
     * @param {string} dbId The ID of the database
     * @param {string} tableId The ID of the table
     * @param {string} [intersection] The ID of the table to find intersection with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public getTableInfo(dbId: string, tableId: string, intersection?: string, options?: any) {
        return TableApiFp(this.configuration).getTableInfo(dbId, tableId, intersection, options)(this.fetch, this.basePath);
    }

}
