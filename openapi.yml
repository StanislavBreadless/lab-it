openapi: 3.0.3
info:
  title: DBMS by Stanislav Bezkorovainyi
  description: Опис DBMS до лабораторної роботи з інформаційних технологій
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8000
tags:
  - name: DBMS
    description: API for interacting with DBMS
paths:
  /dbs:
    get: 
      tags:
        - dbs
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: The name of the database to retrieve

      summary: Retrive information about a database/databases.
      description: Retrievies the list of all database or a particular one.
      operationId: getDB
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatabaseMeta'
        '404':
          description: Not found
    post:
      tags:
        - dbs
      operationId: createDB
      requestBody:
        description: The payload with the name of the database to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                name:
                  type: string
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successfully created the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        '400':
          description: Invalid request
        '404':
          description: Not found
  
  /dbs/{dbId}:
    get: 
      tags:
        - dbs
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database to retrieve

      summary: Retrive information about a database.
      description: Retrieve information about a particular DB.
      operationId: getDBById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatabaseMeta'
        '404':
          description: Not found
    post:
      tags:
        - dbs
      summary: Edit name of the database.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The name of the database to retrieve
          
      requestBody:
        description: The payload with the name of the database to change to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                name:
                  type: string
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid request
        '404':
          description: Not found
    delete: 
      tags:
        - dbs
      summary: Delete the database.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The name of the database to retrieve
      responses:
        '200':
          description: Successful operation
        '404':
          description: Not found

  /dbs/{dbId}/tables:
    post:
      tags:
        - table
      operationId: createTable
      summary: Create table for a database.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database to add the table to
      requestBody:
        description: The payload with the name of the table to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NameRequest'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successfully created the table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        '400':
          description: Invalid request
        '404':
          description: Not found
  
  /dbs/{dbId}/tables/{tableId}:
    post:
      tags:
        - table
      operationId: editTableName
      summary: Edit table's name.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table

      requestBody:
        description: The payload with the name of the new table name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NameRequest'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successfully edited the table's name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        '400':
          description: Invalid request
        '404':
          description: Not found
    get:
      tags:
        - table
      operationId: getTableInfo
      summary: Get all the data from the table.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table

      responses:
        '200':
          description: Successfully retrieved the table's name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableData'
        '404':
          description: Not found
    delete:
      tags:
        - table
      operationId: deleteTable
      summary: Delete a table from a database.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table
      responses:
        '200':
          description: Successfully deleted the table
        '404':
          description: Not found
          
  /dbs/{dbId}/tables/{tableId}/columns:
    post:
      tags:
        - columns
      operationId: createColumn
      summary: Add a column to a table.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table

      requestBody:
        description: The payload with the name and type of the new column
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddColumnQuery'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successfully added a column to the table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        '400':
          description: Invalid request
        '404':
          description: Not found
          

  /dbs/{dbId}/tables/{tableId}/columns/{columnId}:
    post:
      tags:
        - columns
      operationId: addColumn
      summary: Change name of a column in a table
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table
        - in: path
          required: true
          name: columnId
          schema:
            type: string
          description: The ID of the column

      requestBody:
        description: The payload with the new name of the column
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NameRequest'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successfully edited the table's name
        '400':
          description: Invalid request
        '404':
          description: Not found
    delete:
      tags:
        - columns
      operationId: deleteColumn
      summary: Delete a column from a table
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table
        - in: path
          required: true
          name: columnId
          schema:
            type: string
          description: The ID of the column
      responses:
        '200':
          description: Successfully edited the table's name
        '404':
          description: Not found
          
  
  /dbs/{dbId}/tables/{tableId}/rows:
    post:
      tags:
        - rows
      operationId: addRow
      summary: Add table's row.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table

      requestBody:
        description: The payload with the new row's content
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                nullable: true
              example: ["column1Value", "column2Value"]
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successfully added a row to the table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        '400':
          description: Invalid request
        '404':
          description: Not found
          
  
  /dbs/{dbId}/tables/{tableId}/rows/{rowId}:
    post:
      tags:
        - rows
      operationId: changeRowName
      summary: Update a value in a cell in a particular row.
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table
        - in: path
          required: true
          name: rowId
          schema:
            type: string
          description: The ID of the row

      requestBody:
        description: The payload with the information on which cell to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCellRequest'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successfully updated a value in the cell
        '400':
          description: Invalid request
        '404':
          description: Not found
    delete:
      tags:
        - rows
      operationId: deleteRow
      summary: Delete a row from a table
      parameters:
        - in: path
          required: true
          name: dbId
          schema:
            type: string
          description: The ID of the database
        - in: path
          required: true
          name: tableId
          schema:
            type: string
          description: The ID of the table
        - in: path
          required: true
          name: rowId
          schema:
            type: string
          description: The ID of the row
      responses:
        '200':
          description: Successfully deleted the row
        '404':
          description: Not found
          
  /blobs/{blobId}:
    get:
      tags:
        - blobs
      operationId: getBlob
      summary: Retrieve an HTML blob
      parameters:
        - in: path
          required: true
          name: blobId
          schema:
            type: string
          description: The ID of the blob to retrieve
      responses:
        '200':
          description: Successfully retrieved the blob
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not found


components:
  schemas:
    DatabaseMeta: 
      type: object
      properties:
        id: 
          type: string
          example: "da4c49e4-69b6-11ed-a1eb-0242ac120002"
        name:
          type: string
          example: "My database"
        tables:
          type: array
          items:
            $ref: '#/components/schemas/TableMetadata'
    TableMetadata:
      type: object
      properties:
        id: 
          type: string
          example: "3d9eac9e-69b7-11ed-a1eb-0242ac120002"
        name:
          type: string
          example: "My table"
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMetadata'
    ColumnMetadata:
      type: object
      properties:
        id: 
          type: string
          example: "5f396a42-69b7-11ed-a1eb-0242ac120002"
        name:
          type: string
          example: "My column"
        type:
          type: string
          description: Column type
          example: String
          enum:
            - Integer
            - Real
            - Char
            - String
            - HtmlFile
            - StringInvl
    IdResponse:
      type: object
      properties:
        id: 
          type: string
          example: "2347cda6-69b9-11ed-a1eb-0242ac120002"
    NameRequest:
      type: object
      properties:
        name:
          type: string
          example: "Object name"
          
    RowData:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
            nullable: true
        rowId:
          type: string
          example: "2347cda6-69b9-11ed-a1eb-0242ac120002"

    TableData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RowData'
          example:
            - data: ["Column value 1", "Column value 2"]
              rowId: 2347cda6-69b9-11ed-a1eb-0242ac120002
            - data: [null, "Column 2 value on row2"]
              rowId: 2347cda6-69b9-11ed-a1eb-0242ac120002
            - data: ["Column 1 value on row3", null]
              rowId: 2347cda6-69b9-11ed-a1eb-0242ac120002
        
    AddColumnQuery:
      type: object
      properties:
        name:
          type: string
          example: "MyColumnName"
        type:
          type: string
          enum:
            - Integer
            - Real
            - Char
            - String
            - HtmlFile
            - StringInvl
            
    EditCellRequest:
      type: object
      properties:
        colId: 
          type: string
          example: "2347cda6-69b9-11ed-a1eb-0242ac120002"
        newValue:
          type: string
          nullable: true
          example: "NewValue"

  